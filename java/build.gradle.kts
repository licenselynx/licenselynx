/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    `maven-publish`
    jacoco
    checkstyle
    id("org.barfuin.gradle.jacocolog") version "3.1.0"

}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}


dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.1")
    testImplementation("org.mockito:mockito-core:3.+")
    testImplementation("org.mockito:mockito-junit-jupiter:3.+")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.10.2")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    implementation("com.fasterxml.jackson.core:jackson-databind:2.17.1")

    implementation("org.apache.logging.log4j:log4j-core:2.23.1")


}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    withSourcesJar()
    withJavadocJar()
}

application {
    // Define the main class for the application.
    mainClass = "main.java.org.licenselynx"
}

tasks.named<JacocoReport>("jacocoTestReport").configure {
    dependsOn(tasks.named("test"))
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)
    }
}

tasks.named("check").configure {
    dependsOn(tasks.named("jacocoTestReport"))
}

dependencies {
    checkstyle("com.puppycrawl.tools:checkstyle:${checkstyle.toolVersion}")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


/*
 * - - - -  CHECKSTYLE  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
checkstyle {
    toolVersion = "8.27"
    isShowViolations = true
    isIgnoreFailures = false
}
project.extensions.findByName("checkstyle")?.let { checkstyleExtension ->
    (checkstyleExtension as? CheckstyleExtension)?.sourceSets?.forEach { sourceSet ->
        val checkstyleTask = tasks.findByName(sourceSet.getTaskName("checkstyle", null)) as? Checkstyle
        checkstyleTask?.source = sourceSet.allSource
        logger.info("Reconfigured task '${checkstyleTask?.name}' to include all files in sourceSet '${sourceSet.name}'")
    }
}


dependencies {
    checkstyle("com.puppycrawl.tools:checkstyle:${checkstyle.toolVersion}")
    checkstyle("com.github.sevntu-checkstyle:sevntu-checks:1.37.0")
}
